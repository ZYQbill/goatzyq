#include <bits/stdc++.h>
#define debug(x) cout << #x <<"\t"<<x <<endl 

using namespace std;

const int maxn = 1 << 20;
using ll = long long;

struct node{
	int v, nxt; 	
}; 
node edge[maxn<<1];
int head[maxn<<1], cnt=0;
ll ans = 0, dp[maxn<<1];

struct SAM {
    int ch[maxn<<1][26], len[maxn<<1] = {-1}, fa[maxn<<1];
    int sz = 2, last = 1;
    void init() {
        sz = 2;
        last = 1;
        memset(ch[1], 0, sizeof(ch[1]));
    }
    void extend(int c) {
    	dp[sz]=1;
        int p = last, np = last = sz++;
        memset(ch[np], 0, sizeof(ch[np]));
        len[np] = len[p] + 1;
        for (; p && !ch[p][c]; p = fa[p]) ch[p][c] = np;
        if (!p) {
            fa[np] = 1;
            return;
        }
        int q = ch[p][c];
        if (len[p] + 1 == len[q]) {
            fa[np] = q;
        } else {
            int nq = sz++;
            len[nq] = len[p] + 1;
            memcpy(ch[nq], ch[q], sizeof(ch[0]));
            fa[nq] = fa[q];
            fa[np] = fa[q] = nq;
            for (; ch[p][c] == q; p = fa[p]) ch[p][c] = nq;
        }
        return;
    }
}sam;



void addedge(int u, int v){
	edge[cnt].v  = v;
	edge[cnt].nxt = head[u];
	head[u] = cnt++;
}
void init(){
	cnt = 0;
	memset(head, -1, sizeof(head));
}
char s[maxn];

void dfs(int u){
//	dp[u] = 1;
	for(int i=head[u]; ~i; i= edge[i].nxt){
		int v = edge[i].v;
		dfs(v);
		dp[u] += dp[v];
	}
	if(dp[u]>1){
		ans = max(ans, dp[u]*sam.len[u]);
	}
}

int main()
{
//	freopen("P3804_1.in", "r", stdin);
    sam.init();
    int n;
    scanf("%s", s);
    n = strlen(s);
    for (int i = 0; i < n; ++i){
    	sam.extend(s[i]-'a');
	}
    init();
    for(int i=2; i<sam.sz; ++i){
    	addedge(sam.fa[i], i);
	}
	dfs(1);
	cout << ans;
    return 0;
}
